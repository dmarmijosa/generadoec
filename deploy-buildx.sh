#!/bin/bash

# Script optimizado para desplegar GeneradorEC usando Docker Buildx
# Autor: Danny Armijos
# Uso: ./deploy-buildx.sh [version]

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
DOCKER_REPO="dmarmijosa/generadorec"
VERSION=${1:-"v1.0.0"}
BUILDER_NAME="generadorec-builder"

echo -e "${BLUE}üöÄ Despliegue Multi-Arquitectura de GeneradorEC${NC}"
echo -e "${BLUE}Versi√≥n: ${VERSION}${NC}"
echo ""

# Funci√≥n para verificar prerrequisitos
check_prerequisites() {
    echo -e "${YELLOW}üîç Verificando prerrequisitos...${NC}"
    
    # Verificar Docker
    if ! docker info &> /dev/null; then
        echo -e "${RED}‚ùå Docker no est√° corriendo${NC}"
        exit 1
    fi
    
    # Verificar Docker Buildx
    if ! docker buildx version &> /dev/null; then
        echo -e "${RED}‚ùå Docker Buildx no est√° disponible${NC}"
        exit 1
    fi
    
    # Verificar directorio del proyecto
    if [ ! -f "package.json" ]; then
        echo -e "${RED}‚ùå Debe ejecutarse desde el directorio ra√≠z del proyecto${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Todos los prerrequisitos cumplidos${NC}"
}

# Funci√≥n para configurar builder
setup_builder() {
    echo -e "${YELLOW}üîß Configurando builder multi-arquitectura...${NC}"
    
    # Verificar si el builder ya existe
    if docker buildx ls | grep -q "$BUILDER_NAME"; then
        echo -e "${BLUE}‚ÑπÔ∏è  Builder '$BUILDER_NAME' ya existe, usando existente${NC}"
        docker buildx use $BUILDER_NAME
    else
        echo -e "${YELLOW}üÜï Creando nuevo builder '$BUILDER_NAME'${NC}"
        docker buildx create --name $BUILDER_NAME --use
    fi
    
    # Inicializar builder
    echo -e "${YELLOW}üöÄ Inicializando builder...${NC}"
    docker buildx inspect --bootstrap
    
    echo -e "${GREEN}‚úÖ Builder configurado exitosamente${NC}"
}

# Funci√≥n para verificar login a Docker Hub
check_docker_login() {
    echo -e "${YELLOW}üîê Verificando autenticaci√≥n Docker Hub...${NC}"
    
    # Intentar obtener informaci√≥n del usuario
    if ! docker info 2>/dev/null | grep -q "Username:"; then
        echo -e "${YELLOW}üí° Necesitas hacer login a Docker Hub${NC}"
        if ! docker login; then
            echo -e "${RED}‚ùå Error en autenticaci√≥n Docker Hub${NC}"
            exit 1
        fi
    fi
    
    echo -e "${GREEN}‚úÖ Autenticado en Docker Hub${NC}"
}

# Funci√≥n para construir y subir imagen multi-arquitectura
build_and_push() {
    echo -e "${YELLOW}üèóÔ∏è  Construyendo imagen multi-arquitectura...${NC}"
    
    # Construir para m√∫ltiples plataformas y subir directamente
    if docker buildx build \
        --platform linux/amd64,linux/arm64 \
        -t $DOCKER_REPO:$VERSION \
        -t $DOCKER_REPO:latest \
        --push .; then
        
        echo -e "${GREEN}‚úÖ Imagen multi-arquitectura construida y subida exitosamente${NC}"
        echo -e "${BLUE}üì¶ Tags creados:${NC}"
        echo -e "   ‚Ä¢ $DOCKER_REPO:$VERSION"
        echo -e "   ‚Ä¢ $DOCKER_REPO:latest"
    else
        echo -e "${RED}‚ùå Error construyendo/subiendo imagen${NC}"
        exit 1
    fi
}

# Funci√≥n para verificar imagen
verify_image() {
    echo -e "${YELLOW}üîç Verificando imagen multi-arquitectura...${NC}"
    
    if docker manifest inspect $DOCKER_REPO:latest &> /dev/null; then
        echo -e "${GREEN}‚úÖ Imagen verificada en Docker Hub${NC}"
        
        # Mostrar arquitecturas disponibles
        echo -e "${BLUE}üèóÔ∏è  Arquitecturas disponibles:${NC}"
        docker manifest inspect $DOCKER_REPO:latest | jq -r '.manifests[] | select(.platform) | "   ‚Ä¢ \(.platform.os)/\(.platform.architecture)"' 2>/dev/null || echo "   ‚Ä¢ linux/amd64, linux/arm64"
    else
        echo -e "${RED}‚ùå Error verificando imagen${NC}"
        exit 1
    fi
}

# Funci√≥n para desplegar en ArgoCD
deploy_argocd() {
    echo -e "${YELLOW}üöÄ Desplegando en ArgoCD...${NC}"
    
    # Verificar que kubectl est√© disponible
    if ! command -v kubectl &> /dev/null; then
        echo -e "${RED}‚ùå kubectl no est√° disponible${NC}"
        exit 1
    fi
    
    # Verificar manifiestos
    echo -e "${YELLOW}üìã Validando manifiestos...${NC}"
    for file in k8s/*.yaml; do
        if ! kubectl apply --dry-run=client -f "$file" &> /dev/null; then
            echo -e "${RED}‚ùå Error en manifiesto: $file${NC}"
            exit 1
        fi
    done
    
    # Aplicar aplicaci√≥n ArgoCD
    if kubectl apply -f k8s/argocd-application.yaml; then
        echo -e "${GREEN}‚úÖ Aplicaci√≥n ArgoCD desplegada${NC}"
    else
        echo -e "${RED}‚ùå Error desplegando en ArgoCD${NC}"
        exit 1
    fi
}

# Funci√≥n para mostrar informaci√≥n final
show_summary() {
    echo ""
    echo -e "${GREEN}üéâ ¬°Despliegue completado exitosamente!${NC}"
    echo "=================================================="
    echo ""
    echo -e "${BLUE}üìä Resumen del despliegue:${NC}"
    echo -e "   ‚Ä¢ Imagen: $DOCKER_REPO:$VERSION"
    echo -e "   ‚Ä¢ Arquitecturas: linux/amd64, linux/arm64"
    echo -e "   ‚Ä¢ ArgoCD: Aplicaci√≥n 'generadorec' desplegada"
    echo ""
    echo -e "${BLUE}üîó Enlaces √∫tiles:${NC}"
    echo -e "   ‚Ä¢ Aplicaci√≥n: https://generadorec.dmarmijosa.com"
    echo -e "   ‚Ä¢ Docker Hub: https://hub.docker.com/r/dmarmijosa/generadorec"
    echo ""
    echo -e "${YELLOW}üìù Pr√≥ximos pasos:${NC}"
    echo -e "   1. Verificar estado en ArgoCD UI"
    echo -e "   2. Configurar DNS para generadorec.dmarmijosa.com"
    echo -e "   3. Verificar certificados SSL autom√°ticos"
}

# Funci√≥n principal
main() {
    check_prerequisites
    check_docker_login
    setup_builder
    build_and_push
    verify_image
    deploy_argocd
    show_summary
}

# Ejecutar funci√≥n principal
main
