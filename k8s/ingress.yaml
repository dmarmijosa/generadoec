apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: generadorec-ingress
  namespace: generadorec
  labels:
    app: generadorec
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-cloudns-prod"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # CORS Configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://generadorec.dmarmijosa.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Cache control to ensure latest version is served
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "Cache-Control: no-cache, no-store, must-revalidate";
      more_set_headers "Pragma: no-cache";
      more_set_headers "Expires: 0";
spec:
  ingressClassName: public
  tls:
  - hosts:
    - generadorec.dmarmijosa.com
    secretName: generadorec-tls
  rules:
  - host: generadorec.dmarmijosa.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: generadorec-service
            port:
              number: 3000
